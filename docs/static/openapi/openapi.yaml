openapi: 3.1.0
info:
  title: Singularity API
  description: "Welcome to the *Singularity*! \n\nThis documentation covers the ready-to-use\
    \ endpoints \nfor authentication, user management, and content management that\
    \ come pre-configured with \n*Singularity*.\n\n**Features at a Glance**:\n\n-\
    \ **Authentication & User Management:** Includes JWT auth with refresh tokens,\
    \ 2FA, \n  email verification, and role-based access control.\n  \n- **Data &\
    \ Content Management:** Endpoints for interacting with a content management \n\
    \  system that supports multi-language content, configurable tagging, and built-in\
    \ \n  access control. A prebuilt `Article` class is also provided.\n  \n- **Performance\
    \ & Security:** The API is built with a focus on production-readiness, \n  including\
    \ rate limiting and secret manager integration with automated key rotation.\n\n\
    This API is a foundation for building robust backend services, microservices,\
    \ or \nfull-stack applications.\n\n**Note:** Some endpoints require explicit configuration\
    \ to be enabled."
  contact:
    name: Stereov
    url: https://stereov.io
    email: contact@stereov.io
  license:
    name: GPLv3 License
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
- url: https://singularity.stereov.io
  description: Demo server
- url: http://localhost:8000
  description: Local development server
tags:
- name: Authentication
  description: Operations related to user authentication.
- name: Two-Factor Authentication
  description: Operations related to two-factor authentication
- name: OAuth2
  description: Operations related to connecting and disconnecting identity providers
    to existing accounts.
- name: Sessions
  description: Operations related to session management.
- name: Roles
  description: Operations related to roles.
- name: Groups
  description: Operation related to group and member management.
- name: User Settings
  description: Operations related to user settings.
- name: Security
  description: Operations related to managing the servers security.
- name: Users
  description: Operations related to user information.
paths:
  /api/auth/register:
    post:
      tags:
      - Authentication
      summary: Register
      description: "Registers a new user account with `email`, `password`, and `name`.\n\
        \n**Requirements:**\n- The `email` should be a valid email address (e.g.,\
        \ \"test@example.com\")\n  that is not associated to an existing account.\n\
        - The `password` must be at least 8 characters long and include at least one\
        \ uppercase letter, \n  one lowercase letter, one number, and one special\
        \ character (!@#$%^&*()_+={}[]|\\:;'\"<>,.?/).\n\n**Optional session data:**\n\
        - The `session` object can be included in the request body.\n- Inside the\
        \ `session` object, you can provide the following optional fields:\n    -\
        \ `browser`: The name of the browser used (e.g., \"Chrome\", \"Firefox\").\n\
        \    - `os`: The operating system of the device (e.g., \"Windows\", \"macOS\"\
        , \"Android\").\n\nThis information helps users identify and manage authorized\
        \ sessions, improving overall account security.\n\n**Locale:**\n\nA locale\
        \ can be specified for this request. \nThis will be used for the email verification\
        \ email.\nYou can learn more about email verification [here](https://singularity.stereov.io/docs/guides/auth/authentication#email-verification).\n\
        \nIf no locale is specified, the applications default locale will be used.\n\
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).\n\
        \n**Tokens:**\n\nIf successful, [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n[`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\
        \ \nwill automatically be set as HTTP-only cookies.\nIf [header authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled,\n[`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n[`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\n\
        will be returned in the response body and can be used as \nbearer tokens in\
        \ the authorization header for upcoming requests."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#registering-users
      operationId: register
      parameters:
      - name: send-email
        in: query
        required: false
        schema:
          type: boolean
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
        required: true
      responses:
        "200":
          description: Registration successful. Returns user details and tokens if
            header authentication is enabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "304":
          description: User is already authenticated. Authenticated session state
            has not changed since last request.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: '`email` or `password` are invalid.'
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: The email is already in use.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - {}
      - {}
  /api/auth/login:
    post:
      tags:
      - Authentication
      summary: Login
      description: "Authenticates a user with `email` and `password`.\n\n**Optional\
        \ session data:**\n- The `session` object can be included in the request body.\n\
        - Inside the `session` object, you can provide the following optional fields:\n\
        \    - `browser`: The name of the browser used (e.g., \"Chrome\", \"Firefox\"\
        ).\n    - `os`: The operating system of the device (e.g., \"Windows\", \"\
        macOS\", \"Android\").\n\nThis information helps users identify and manage\
        \ authorized sessions, improving overall account security.\n\n**2FA:**\n\n\
        If the user enabled 2FA, the user will not be authenticated immediately. \n\
        Instead, a [`TwoFactorAuthenticationToken`](https://singularity.stereov.io/docs/guides/auth/tokens#two-factor-authentication-token)\
        \ \nis set as HTTP-only cookie and returned in the response body\nif [header\
        \ authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled.\n\nYou can complete the login through the endpoint [`POST /api/auth/2fa/login`](https://singularity.stereov.io/docs/api/complete-login).\n\
        \n**Locale:**\n\nA locale can be specified for this request. \nThis will be\
        \ used for the email 2FA code if this method is enabled for the user.\nYou\
        \ can learn more about 2FA through email [here](/docs/guides/auth/two-factor#email).\n\
        \nIf no locale is specified, the applications default locale will be used.\n\
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).\n\
        \n**Tokens:**\n- If 2FA is disabled and the request is successful, \n  [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ \n  and [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\
        \ \n  will automatically be set as HTTP-only cookies.\n  If [header authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled,\n  [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n  [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\
        \ \n  will be returned in the response body and can be used as \n  bearer\
        \ tokens in the authorization header for upcoming requests."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#login
      operationId: login
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: Authentication successful. Returns tokens and user details.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "304":
          description: User is already authenticated. Authenticated session state
            has not changed since last request.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Trying to log in user that did not set up authentication using
            password.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid credentials.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/logout:
    post:
      tags:
      - Authentication
      summary: Logout
      description: "Invalidates the current session's [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)s\
        \ \nand [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)s.\n\
        \n**Tokens:**\n- To perform the logout, an [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ is required.\n- If successful, all cookies related to the user's session\
        \ will be invalidated."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#logout
      operationId: logout
      responses:
        "200":
          description: Logout successful.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Invalid AccessToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/refresh:
    post:
      tags:
      - Authentication
      summary: Refresh Access Token
      description: "Request a new [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token).\n\
        \n**Tokens:**\n- Requires a valid [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token).\n\
        - If successful, [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n  [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\
        \ \n  will automatically be set as HTTP-only cookies.\n  If [header authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled,\n  [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n  [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\n\
        \  will be returned in the response body and can be used as \n  bearer tokens\
        \ in the authorization header for upcoming requests."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#refresh
      operationId: refreshAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionInfoRequest"
      responses:
        "200":
          description: Authentication successful. Returns tokens and user details.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "401":
          description: Invalid RefreshToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - refreshTokenHeader: []
      - refreshTokenCookie: []
  /api/auth/step-up:
    post:
      tags:
      - Authentication
      summary: Step-Up
      description: "Requests [step-up authentification](https://singularity.stereov.io/docs/guides/auth/authentication#step-up).\
        \ \nThis re-authentication is required by critical endpoints.\n\n**2FA:**\n\
        \nIf the user enabled 2FA, the step-up will not be granted immediately. \n\
        Instead, a [`TwoFactorAuthenticationToken`](https://singularity.stereov.io/docs/guides/auth/tokens#two-factor-authentication-token)\
        \ \nis set as HTTP-only cookie and returned in the response body\nif [header\
        \ authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled.\n\nYou can complete the step-up through the endpoint [`POST\
        \ /api/auth/2fa/step-up`](https://singularity.stereov.io/docs/api/complete-step-up).\n\
        \n**Request Body:**\n\nWhen requesting a step-up for a [`GUEST`](https://singularity.stereov.io/docs/guides/auth/roles#guests)\n\
        there is no way to authenticate the user.\nTherefore, no request body is required\
        \ in this case.\n\nIf you request a step-up for a regular [`USER`](https://singularity.stereov.io/docs/guides/auth/roles#users),\n\
        it will result in a `400 - BAD REQUEST`.\n\n**Locale:**\n\nA locale can be\
        \ specified for this request. \nThis will be used for the email 2FA code if\
        \ this method is enabled for the user.\nYou can learn more about 2FA through\
        \ email [here](/docs/guides/auth/two-factor#email).\n\nIf no locale is specified,\
        \ the applications default locale will be used.\nYou can learn more about\
        \ configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).\n\
        \n**Tokens:**\n- Requires a valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token).\n\
        - If 2FA is disabled and the request is successful, [`StepUpToken`](https://singularity.stereov.io/docs/guides/auth/tokens#step-up-token)\n\
        \  will automatically be set as HTTP-only cookie.\n  If [header authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled,\n  the [`StepUpToken`](https://singularity.stereov.io/docs/guides/auth/tokens#step-up-token)\n\
        \  will be returned in the response body and can be used to authorized critical\
        \ requests."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#step-up
      operationId: stepUp
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StepUpRequest"
      responses:
        "200":
          description: Logout successful.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StepUpResponse"
        "400":
          description: Trying to request step-up for user that authenticated only
            via OAuth2 providers or missing request body for authenticated users.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid credentials.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/status:
    get:
      tags:
      - Authentication
      summary: Get Authentication Status
      description: |-
        Get detailed information about the current status authentication status of the user.

        This endpoint is primarily designed for cookie-based authentication.
        *Singularity* sets HTTP-only cookies by default which cannot be accessed via JavaScript.
        Therefore, you can use this endpoint to request if valid tokens are set.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#status
      operationId: getAuthenticationStatus
      responses:
        "200":
          description: The current user's authentication status.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthenticationStatusResponse"
        "404":
          description: The user contained in the TwoFactorAuthenticationToken does
            not exist.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
        twoFactorAuthenticationTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
        twoFactorAuthenticationTokenCookie: []
  /api/auth/password/reset-request:
    post:
      tags:
      - Authentication
      summary: Send Password Reset Email
      description: "Send a password reset request email to the user's email.\nYou\
        \ can learn more about the password reset [here](https://singularity.stereov.io/docs/guides/auth/authentication#password-reset).\n\
        \nWhen request a password reset through this endpoint\nand [email is enabled\
        \ in your application](https://singularity.stereov.io/docs/guides/email/configuration)\
        \ \nan email containing a link is sent to the user's email address.\nThis\
        \ link should point to the frontend of your application.\nYour frontend should\
        \ extract the token from the URL and send it to this endpoint with the\ntoken\
        \ as request parameter.\nYou can find more information about this [here](https://singularity.stereov.io/docs/guides/auth/authentication#password-reset).\n\
        \nYou can perform the reset using the token through the endpoint [`POST /api/auth/password/reset`](https://singularity.stereov.io/docs/api/reset-password).\n\
        \n**Note:** If email is disabled, there is no way to reset the password.\n\
        \n**Locale:**\n\nA locale can be specified for this request. \nThe email will\
        \ be sent in the specified locale.\nYou can learn more about locale in emails\
        \ [here](https://singularity.stereov.io/docs/guides/email/templates).\n\n\
        If no locale is specified, the applications default locale will be used.\n\
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).\n\
        \n**Note:** After each email, a cooldown will be started.\nWhen the cooldown\
        \ is active, no new verification email can be sent.\nThe cooldown can be configured\
        \ [here](https://singularity.stereov.io/docs/guides/email/configuration)."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#password-reset
      operationId: sendPasswordResetEmail
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendPasswordResetRequest"
        required: true
      responses:
        "200":
          description: The number of seconds the user needs to wait to send a new
            email.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MailSendResponse"
        "429":
          description: Cooldown is active. You have to wait until you can send another
            email.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Email is disabled in your application.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - {}
      - {}
  /api/auth/password/reset:
    post:
      tags:
      - Authentication
      summary: Reset Password
      description: "Perform a password reset using a `token` you obtained the user\
        \ received in a password reset email.\nYou can learn more about the password\
        \ reset [here](https://singularity.stereov.io/docs/guides/auth/authentication#password-reset).\n\
        \nWhen request a password reset through [`POST /api/auth/password/reset-request`](https://singularity.stereov.io/docs/api/send-password-reset-email)\
        \ \nand [email is enabled in your application](https://singularity.stereov.io/docs/guides/email/configuration)\
        \ \nan email containing a link is sent to the user's email address.\nThis\
        \ link should point to the frontend of your application.\nYour frontend should\
        \ extract the token from the URL and send it to this endpoint with the\ntoken\
        \ as request parameter.\nYou can find more information about this [here](https://singularity.stereov.io/docs/guides/auth/authentication#password-reset).\n\
        \nIf successful, the user can log in using the new password afterwards.\n\n\
        You can resend this email through the endpoint [`POST /api/auth/password/reset-request`](https://singularity.stereov.io/docs/api/send-password-reset-email).\n\
        \n**Note:** If email is disabled, there is no way to reset the password."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#password-reset
      operationId: resetPassword
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
        required: true
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: "Trying to request a password reset for a user that only authenticated\
            \ via OAuth2 providers or a [`GUEST`](https://singularity.stereov.io/docs/guides/auth/roles#guests)."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: No password identity is set up for the user.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - {}
      - {}
  /api/auth/password/reset/cooldown:
    get:
      tags:
      - Authentication
      summary: Get Remaining Password Reset Cooldown
      description: |-
        Get the remaining time in seconds until you can send another password reset request.

        You can find more information about a password reset [here](https://singularity.stereov.io/docs/guides/auth/authentication#password-reset).
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/authentication#password-reset
      operationId: getRemainingPasswordResetCooldown
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The remaining cooldown.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MailCooldownResponse"
      security:
      - {}
      - {}
  /api/auth/email/verify/send:
    post:
      tags:
      - Authentication
      summary: Send Email Verification Email
      description: "Send an email verification email to the user.\n\nThis endpoint\
        \ is for **resending** the verification email only.\nWhen registering a user\
        \ and [email is enabled in your application](https://singularity.stereov.io/docs/guides/email/configuration)\n\
        an email containing a link is automatically sent to the user's email address.\n\
        This link should point to the frontend of your application.\nYou can find\
        \ more information about this [here](https://singularity.stereov.io/docs/guides/auth/authentication#email-verification).\n\
        Your frontend should extract the token from the URL and send it to this endpoint\
        \ with the\ntoken as request parameter.\n\nYou can perform the verification\
        \ using the token through the endpoint [`POST /api/auth/email/verify`](https://singularity.stereov.io/docs/api/verify-email).\n\
        \n**Note:** If email is disabled, there is no way to verify a user's email\
        \ address.\n\n**Locale:**\n\nA locale can be specified for this request. \n\
        The email will be sent in the specified locale.\nYou can learn more about\
        \ locale in emails [here](https://singularity.stereov.io/docs/guides/email/templates).\n\
        \nIf no locale is specified, the applications default locale will be used.\n\
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).\n\
        \n**Tokens:**\n- A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ is required.\n\n**Note:** After each email, a cooldown will be started.\n\
        When the cooldown is active, no new verification email can be sent.\nThe cooldown\
        \ can be configured [here](https://singularity.stereov.io/docs/guides/email/configuration)."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/docs/auth/authentication#email-verification
      operationId: sendEmailVerificationEmail
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: The number of seconds the user needs to wait before sending
            a new email.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MailSendResponse"
        "304":
          description: Trying to send a verification email for verified account.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Trying to send a verification email for [`GUEST`](https://singularity.stereov.io/docs/guides/auth/roles#guests)."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: AccessToken is invalid or expired.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Cooldown is active. You have to wait until you can send another
            email.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Email is disabled in your application.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/email/verify:
    post:
      tags:
      - Authentication
      summary: Verify Email
      description: |-
        Verify the user's email address using the `token` the user received a email verification email.
        You can find more information about this [here](https://singularity.stereov.io/docs/guides/auth/authentication#email-verification).

        When registering a user and [email is enabled in your application](https://singularity.stereov.io/docs/guides/email/configuration)
        an email containing a link is sent to the user's email address.
        This link should point to the frontend of your application.
        Your frontend should extract the token from the URL and send it to this endpoint with the
        token as request parameter.
        You can find more information about this [here](https://singularity.stereov.io/docs/guides/auth/authentication#email-verification).

        You can resend this email through the endpoint [`POST /api/auth/email/verify/send`](https://singularity.stereov.io/docs/api/send-email-verification-email).

        **Note:** If email is disabled, there is no way to verify a user's email address.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/docs/auth/authentication#email-verification
      operationId: verifyEmail
      parameters:
      - name: token
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "304":
          description: Trying to verify an email for verified account.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Trying to verify an email for [`GUEST`](https://singularity.stereov.io/docs/guides/auth/roles#guests)."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - {}
      - {}
  /api/auth/email/verify/cooldown:
    get:
      tags:
      - Authentication
      summary: Get Remaining Email Verification Cooldown
      description: |-
        Get the remaining time in seconds until you can send another email verification email.

        You can find more information about email verification [here](https://singularity.stereov.io/docs/guides/auth/authentication#email-verification).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token) is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/docs/auth/authentication#email-verification
      operationId: getRemainingEmailVerificationCooldown
      responses:
        "200":
          description: The remaining cooldown.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MailCooldownResponse"
        "401":
          description: AccessToken is invalid or expired.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/2fa/login:
    post:
      tags:
      - Two-Factor Authentication
      summary: Complete Login
      description: "Perform second factor for login. A TwoFactorAuthenticationToken\
        \ is required. This token can be obtained by calling POST /api/auth/login.\
        \ If successful, an AccessToken and RefreshToken will be set as HTTP-only\
        \ cookies and returned in the response body if header authentication is enabled."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor
      operationId: completeLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorAuthenticationRequest"
        required: true
      responses:
        "200":
          description: Information about the user and the tokens if header authentication
            is enabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: This 2FA method is disabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - twoFactorAuthenticationTokenHeader: []
      - twoFactorAuthenticationTokenCookie: []
  /api/auth/2fa/step-up:
    post:
      tags:
      - Two-Factor Authentication
      summary: Complete Step-Up
      description: "Perform second factor for step-up. A TwoFactorAuthenticationToken\
        \ is required. This token can be obtained by calling POST /api/auth/step-up.\
        \ If successful, a StepUpToken will be set as HTTP-only cookie and returned\
        \ in the response body if header authentication is enabled."
      externalDocs:
        url: https://singularity.stereov.io/docs/auth/two-factor
      operationId: completeStepUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorAuthenticationRequest"
        required: true
      responses:
        "200":
          description: The token if header authentication is enabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StepUpResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: This 2FA method is disabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        twoFactorAuthenticationTokenHeader: []
      - accessTokenCookie: []
        twoFactorAuthenticationTokenCookie: []
  /api/auth/2fa/preferred-method:
    post:
      tags:
      - Two-Factor Authentication
      summary: Change Preferred 2FA Method
      description: Change the preferred 2FA method. Step-up is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#changing-the-preferred-method
      operationId: changePreferredMethod
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePreferredTwoFactorMethodRequest"
        required: true
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: This 2FA method is disabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/2fa/totp/setup:
    get:
      tags:
      - Two-Factor Authentication
      summary: Get TOTP Setup Details
      description: |
        Get a TOTP secret, recovery codes and a TOTP URL.
        The user needs to save the recovery codes and use the URL or the secret to set up 2FA in their 2FA app.

        This secret will be stored inside the token contained in the response.
        This token is required to enable TOTP.
        Performing this request will not change the user's state in the database.
        Therefore, the token is the single point of truth for validation.
        Every request will generate a new TOTP secret, new recovery codes and a new TOTP URL.

        This action requires a valid `StepUpToken`.

        The user must be able to authenticate using a password.
        If the user registered using OAuth2 and did not [set up password authentication](https://singularity.stereov.io/docs/guides/auth/oauth2#adding-password-authentication),
        this action will fail.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#setup
      operationId: getTotpSetupDetails
      responses:
        "200":
          description: "\n                    The TOTP secret, recovery codes, TOTP\
            \ URL and setup token.\n                    \n                    Show\
            \ the secret, TOTP URL to the user. \n                    They can use\
            \ the secret or URL to set up 2FA in their 2FA app.\n                \
            \    \n                    Make sure the user saves the recovery codes\
            \ in case they lost access to their 2FA app.\n                    \n \
            \                   The token is required to enable TOTP.\n          \
            \      "
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TwoFactorSetupResponse"
        "401":
          description: AccessToken or StepUpToken is invalid.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: The user did not configure authentication using password.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: The user already enabled TOTP.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
    post:
      tags:
      - Two-Factor Authentication
      summary: Enable TOTP as 2FA Method
      description: Set up TOTP for a user using a TOTPSetupToken and the TOTP code.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#setup
      operationId: enableTotpAsTwoFactorMethod
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFactorVerifySetupRequest"
        required: true
      responses:
        "200":
          description: Success.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TwoFactorSetupResponse"
        "401":
          description: AccessToken or StepUpToken is invalid.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: The user did not configure authentication using password.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: The user already enabled TOTP.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/2fa/totp:
    delete:
      tags:
      - Two-Factor Authentication
      summary: Disable TOTP as 2FA Method
      description: Disable TOTP for the current user.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#disable
      operationId: disableTotpAsTwoFactorMethod
      responses:
        "200":
          description: Success.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/2fa/totp/recover:
    post:
      tags:
      - Two-Factor Authentication
      summary: Recover From TOTP
      description: "Recover the user if they lost access to their 2FA device. After\
        \ successful recovery, an AccessToken, RefreshToken and StepUpToken will be\
        \ set as HTTP-only cookies and returned in the response body if header authentication\
        \ is enabled."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#recovery
      operationId: recoverFromTotp
      parameters:
      - name: code
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionInfoRequest"
      responses:
        "200":
          description: "Recovery successful. If header authentication is enabled,\
            \ the response will contain all tokens."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TwoFactorRecoveryResponse"
        "401":
          description: Wrong code.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User is already authenticated.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - twoFactorAuthenticationTokenHeader: []
      - twoFactorAuthenticationTokenCookie: []
  /api/auth/2fa/email/send:
    post:
      tags:
      - Two-Factor Authentication
      summary: Send Email 2FA Code
      description: Send an email containing a 2FA code to the user. It will update
        the code in the database. Needs to be called before enabling this method for
        the user.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#sending-a-2fa-code-via-email
      operationId: sendEmailTwoFactorCode
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Success.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/2fa/email/enable:
    post:
      tags:
      - Two-Factor Authentication
      summary: Enable Email as 2FA Method
      description: Enable email as 2FA method. Step-up is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#setup-1
      operationId: enableEmailAsTwoFactorMethod
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnableEmailTwoFactorMethodRequest"
        required: true
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: This method is already enabled for the user.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/2fa/email:
    delete:
      tags:
      - Two-Factor Authentication
      summary: Disable Email as 2FA Method
      description: Disable email as 2FA method. Step-up is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#disable-1
      operationId: disableEmailAsTwoFactorMethod
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Not authorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: This method is already enabled for the user.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/2fa/email/cooldown:
    get:
      tags:
      - Two-Factor Authentication
      summary: Get Remaining Email 2FA Code Cooldown
      description: Get the remaining time in seconds until you can send another email
        containing a 2FA code.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/two-factor#sending-a-2fa-code-via-email
      operationId: getRemainingEmailTwoFactorCooldown
      responses:
        "200":
          description: The remaining cooldown.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MailCooldownResponse"
        "401":
          description: Unauthorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/providers:
    get:
      tags:
      - OAuth2
      summary: Get Identity Providers
      description: Get a list of connected identity providers for the current user.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/oauth2#getting-connected-providers
      operationId: getIdentityProviders
      responses:
        "200":
          description: The list of identity providers.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdentityProviderResponse"
        "401":
          description: Unauthorized.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/providers/{provider}:
    delete:
      tags:
      - OAuth2
      summary: Delete Identity Provider
      description: Delete an identity provider from the connected identity providers
        of the current user.You are not allowed to delete the password identity or
        the only existing identity.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/oauth2#disconnecting-an-oauth2-provider
      operationId: deleteIdentityProvider
      parameters:
      - name: provider
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Bad request: deleting the password identity or the only registered\
            \ identity is forbidden."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/providers/password:
    post:
      tags:
      - OAuth2
      summary: Add Password Authentication
      description: Create a new identity provider for the current user that allows
        the user to login with a password
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/oauth2#adding-password-authentication
      operationId: addPasswordAuthentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectPasswordIdentityRequest"
        required: true
      responses:
        "200":
          description: Success.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Bad request. User already created a password identity
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/providers/oauth2/token:
    post:
      tags:
      - OAuth2
      summary: Generate OAuth2ProviderConnectionToken
      description: Generate an OAuth2ProviderConnectionToken that enables the user
        to connect new OAuth2 providers.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/oauth2#connecting-an-oauth2-provider-to-an-existing-account
      operationId: generateOAuth2ProviderConnectionToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuth2ProviderConnectionRequest"
        required: true
      responses:
        "200":
          description: Returns the token if header authentication is enabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OAuth2ProviderConnectionTokenResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
        stepUpTokenHeader: []
      - accessTokenCookie: []
        stepUpTokenCookie: []
  /api/auth/sessions:
    get:
      tags:
      - Sessions
      summary: Get Active Sessions
      description: |-
        Get all active sessions of the currently authenticated user.

        You can learn more about sessions [here](https://singularity.stereov.io/docs/guides/auth/sessions).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token) is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/sessions#active-sessions
      operationId: getActiveSessions
      responses:
        "200":
          description: The list of active sessions.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SessionInfoResponse"
        "401":
          description: Invalid or expired AccessToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
    delete:
      tags:
      - Sessions
      summary: Delete All Sessions
      description: "Invalidates all the user's active sessions.\nThis also invalidates\
        \ all [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)s\
        \ \nand [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)s.\n\
        Therefore, logging out the user from all devices.\n\nYou can learn more about\
        \ sessions [here](https://singularity.stereov.io/docs/guides/auth/sessions).\n\
        \n**Tokens:**\n- A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ is required."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/sessions#invalidating-all-session
      operationId: deleteAllSessions
      responses:
        "200":
          description: Successfully deleted all sessions.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Invalid or expired AccessToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/sessions/{sessionId}:
    delete:
      tags:
      - Sessions
      summary: Delete Session
      description: "Delete the session of the current user with the given `id` \n\
        and invalidate all tokens related to this session.\n\nYou can learn more about\
        \ sessions [here](https://singularity.stereov.io/docs/guides/auth/sessions).\n\
        \n**Tokens:**\n- A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ is required."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/sessions#invalidating-a-specific-session
      operationId: deleteSession
      parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: The list of active sessions.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SessionInfoResponse"
        "401":
          description: Invalid or expired AccessToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/auth/sessions/token:
    post:
      tags:
      - Sessions
      summary: Generate SessionToken
      description: "Generate a [`SessionToken`](https://singularity.stereov.io/docs/guides/auth/tokens#session-token)\
        \ for the current session, if the user is authenticated or \na new [`SessionToken`](https://singularity.stereov.io/docs/guides/auth/tokens#session-token)\
        \ instead. \n\nIt's only purpose is to successfully register or log in a user\
        \ via an OAuth2 provider.\nYou can learn more about OAuth2 providers [here](https://singularity.stereov.io/docs/guides/auth/oauth2)."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/oauth2#1-retrieving-a-session-token
      operationId: generateSessionToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionInfoRequest"
      responses:
        "200":
          description: Token generated. The token will be returned if header authentication
            is enabled
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GenerateSessionTokenResponse"
      security:
      - {}
      - {}
  /api/guests:
    post:
      tags:
      - Roles
      summary: Create Guest Account
      description: "Create a new [`GUEST`](https://singularity.stereov.io/docs/guides/auth/roles#guests)\
        \ account.\n\nYou can learn more about `GUEST` accounts [here](https://singularity.stereov.io/docs/guides/roles#guests).\n\
        \n**Optional session data:**\n- The `session` object can be included in the\
        \ request body.\n- Inside the `session` object, you can provide the following\
        \ optional fields:\n    - `browser`: The name of the browser used (e.g., \"\
        Chrome\", \"Firefox\").\n    - `os`: The operating system of the device (e.g.,\
        \ \"Windows\", \"macOS\", \"Android\").\n\nThis information helps users identify\
        \ and manage authorized sessions, improving overall account security.\n\n\
        **Tokens:**\n\nIf successful, [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n[`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\
        \ \nwill automatically be set as HTTP-only cookies.\nIf [header authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled,\n[`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n[`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\n\
        will be returned in the response body and can be used as \nbearer tokens in\
        \ the authorization header for upcoming requests."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/roles#creating-guest-accounts
      operationId: createGuestAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGuestRequest"
        required: true
      responses:
        "200":
          description: Registration successful. Returns user details and tokens if
            header authentication is enabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreateGuestResponse"
        "304":
          description: User is already authenticated. Authenticated session state
            has not changed since last request.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - {}
      - {}
  /api/guests/convert-to-user:
    post:
      tags:
      - Roles
      summary: Convert Guest To User
      description: "Converts a [`GUEST`](https://singularity.stereov.io/docs/guides/roles#guests)\
        \ \naccount to a regular [`USER`](https://singularity.stereov.io/docs/guides/roles#users)\
        \ account.\n\nYou can learn more about `GUEST` accounts [here](https://singularity.stereov.io/docs/guides/roles#guests).\n\
        \n**Requirements:**\n- The `email` should be a valid email address (e.g.,\
        \ \"test@example.com\")\n  that is not associated to an existing account.\n\
        - The `password` must be at least 8 characters long and include at least one\
        \ uppercase letter, \n  one lowercase letter, one number, and one special\
        \ character (!@#$%^&*()_+={}[]|\\:;'\"<>,.?/).\n\n**Optional session data:**\n\
        - The `session` object can be included in the request body.\n- Inside the\
        \ `session` object, you can provide the following optional fields:\n    -\
        \ `browser`: The name of the browser used (e.g., \"Chrome\", \"Firefox\").\n\
        \    - `os`: The operating system of the device (e.g., \"Windows\", \"macOS\"\
        , \"Android\").\n\nThis information helps users identify and manage authorized\
        \ sessions, improving overall account security.\n\n**Locale:**\n\nA locale\
        \ can be specified for this request. \nThis will be used for the email verification\
        \ email.\nYou can learn more about email verification [here](https://singularity.stereov.io/docs/guides/auth/authentication#email-verification).\n\
        \nIf no locale is specified, the applications default locale will be used.\n\
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).\n\
        \n**Tokens:**\n- A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\n\
        \  of a `GUEST` is required.\n- If successful, the tokens of the `GUEST` account\
        \ become invalid.\n    A new [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n    [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\
        \ \n    will automatically be set as HTTP-only cookies.\n    If [header authentication](https://singularity.stereov.io/docs/guides/auth/securing-endpoints#header-authentication)\
        \ is enabled,\n    [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)\
        \ and \n    [`RefreshToken`](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)\n\
        \    will be returned in the response body and can be used as \n    bearer\
        \ tokens in the authorization header for upcoming requests."
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/roles#creating-guest-accounts
      operationId: convertGuestToUser
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConvertToUserRequest"
        required: true
      responses:
        "200":
          description: Registration successful. Returns user details and tokens if
            header authentication is enabled.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ConvertToUserResponse"
        "304":
          description: "Account is already regular [`USER`](https://singularity.stereov.io/docs/guides/roles#users).\
            \ Authenticated session state has not changed since last request."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: '`email` or `password` are invalid.'
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: AccessToken is invalid or expired.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: The email is already in use.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
  /api/admins/{userId}:
    post:
      tags:
      - Roles
      summary: Grant Admin Permissions
      description: |-
        Grant [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions to a user.

        You can find more information about roles [here](https://singularity.stereov.io/docs/guides/auth/roles).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/roles#admins
      operationId: grantAdminPermissions
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      responses:
        "200":
          description: The updated user information
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Invalid or expired AccessToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: "AccessToken does permit [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins)\
            \ access."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
    delete:
      tags:
      - Roles
      summary: Revoke Admin Permissions
      description: |-
        Grant [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions to a user.

        You can find more information about roles [here](https://singularity.stereov.io/docs/guides/auth/roles).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/roles#admins
      operationId: revokeAdminPermissions
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      responses:
        "200":
          description: The updated user information
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Invalid or expired AccessToken.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: "AccessToken does permit [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins)\
            \ access."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: "Trying to revoke [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins)\
            \ permissions for last remaining admin. At least one admin is required."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
  /api/groups:
    get:
      tags:
      - Groups
      summary: Get Groups
      description: |-
        Get all configured groups.

        You can find more information about groups [here](https://singularity.stereov.io/docs/guides/auth/groups).

        **Locale:**

        Group names and descriptions can be specified in multiples languages.
        These can be set when [creating](https://singularity.stereov.io/docs/guides/auth/groups#creating-groups)
        groups or through [updates](https://singularity.stereov.io/docs/guides/auth/groups#updating-groups).

        The `locale` request parameter specifies in which language the information should be returned.
        If no locale is specified, the applications default locale will be used.
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#getting-groups
      operationId: getGroups
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: sort
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Paginated groups.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageGroupResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User does not have ADMIN role.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
    post:
      tags:
      - Groups
      summary: Create Group
      description: |-
        Create a new group.

        You can find more information about groups [here](https://singularity.stereov.io/docs/guides/auth/groups).

        **Locale:**

        Group names and descriptions can be specified in multiples languages.
        These can be set when [creating](https://singularity.stereov.io/docs/guides/auth/groups#creating-groups)
        groups or through [updates](https://singularity.stereov.io/docs/guides/auth/groups#updating-groups).

        The `locale` request parameter specifies in which language the information should be returned.
        If no locale is specified, the applications default locale will be used.
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#creating-groups
      operationId: createGroup
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
        required: true
      responses:
        "200":
          description: Information about newly created group.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User does not have ADMIN role.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
  /api/groups/{key}:
    get:
      tags:
      - Groups
      summary: Get Group By Key
      description: |-
        Get a group by its `key`.

        You can find more information about groups [here](https://singularity.stereov.io/docs/guides/auth/groups).

        **Locale:**

        Group names and descriptions can be specified in multiples languages.
        These can be set when [creating](https://singularity.stereov.io/docs/guides/auth/groups#creating-groups)
        groups or through [updates](https://singularity.stereov.io/docs/guides/auth/groups#updating-groups).

        The `locale` request parameter specifies in which language the information should be returned.
        If no locale is specified, the applications default locale will be used.
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#getting-groups
      operationId: getGroupByKey
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Group information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: "`AccessToken` does permit [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles)\
            \ access."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
    put:
      tags:
      - Groups
      summary: Update Group
      description: |-
        Update the group with the given `key`.

        You can find more information about groups [here](https://singularity.stereov.io/docs/guides/auth/groups).

        **Locale:**

        Group names and descriptions can be specified in multiples languages.
        These can be set when [creating](https://singularity.stereov.io/docs/guides/auth/groups#creating-groups)
        groups or through [updates](https://singularity.stereov.io/docs/guides/auth/groups#updating-groups).

        The `locale` request parameter specifies in which language the information should be returned.
        If no locale is specified, the applications default locale will be used.
        You can learn more about configuring the default locale [here](https://singularity.stereov.io/docs/guides/configuration).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#updating-groups
      operationId: updateGroup
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
        required: true
      responses:
        "200":
          description: Updated group information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: "`AccessToken` does permit [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles)\
            \ access."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
    delete:
      tags:
      - Groups
      summary: Delete Group
      description: |-
        Delete the group of the given `key`.

        You can find more information about groups [here](https://singularity.stereov.io/docs/guides/auth/groups).

        **Tokens:**
        - A valid [`AccessToken`](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)
          with [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles#admins) permissions is required.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#deleting-groups
      operationId: deleteGroup
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: "AccessToken does permit [`ADMIN`](https://singularity.stereov.io/docs/guides/auth/roles)\
            \ access."
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
  /api/groups/{groupKey}/members:
    post:
      tags:
      - Groups
      summary: Add Member to Group
      description: Add a member to a group. Invalidates all AccessTokens.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#adding-members-to-groups
      operationId: addMemberToGroup
      parameters:
      - name: groupKey
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGroupMemberRequest"
        required: true
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User does not have ADMIN role.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
  /api/groups/{groupKey}/members/{userId}:
    delete:
      tags:
      - Groups
      summary: Remove Member from Group
      description: Remove a member from a group. Invalidates all AccessTokens.
      externalDocs:
        url: https://singularity.stereov.io/docs/guides/auth/groups#removing-members-from-groups
      operationId: removeMemberFromGroup
      parameters:
      - name: groupKey
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      responses:
        "200":
          description: Updated user information.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Invalid token.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: User does not have ADMIN role.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader:
        - adminScope
      - accessTokenCookie:
        - adminScope
  /api/users/me:
    get:
      tags:
      - Users
      summary: Get currently authenticated user
      description: Retrieves the user profile information of the currently authenticated
        user.
      operationId: getUser
      responses:
        "200":
          description: User found.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized. No valid token provided.
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
      - accessTokenHeader: []
      - accessTokenCookie: []
    put:
      tags:
      - User Settings
      operationId: changeUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeUserRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
      security:
      - {}
      - {}
    delete:
      tags:
      - User Settings
      operationId: delete
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
      security:
      - {}
      - {}
  /api/users/me/password:
    put:
      tags:
      - User Settings
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
      security:
      - {}
      - {}
  /api/users/me/email:
    put:
      tags:
      - User Settings
      operationId: changeEmail
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmailRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
      security:
      - {}
      - {}
  /api/users/me/avatar:
    put:
      tags:
      - User Settings
      operationId: setAvatar
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
      security:
      - {}
      - {}
    delete:
      tags:
      - User Settings
      operationId: deleteAvatar
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
      security:
      - {}
      - {}
  /api/content/tags/{key}:
    get:
      tags:
      - tag-controller
      operationId: findTagByKey
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagResponse"
      security:
      - {}
      - {}
    put:
      tags:
      - tag-controller
      operationId: updateTag
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTagRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagResponse"
      security:
      - {}
      - {}
    delete:
      tags:
      - tag-controller
      operationId: deleteTag
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/visibility:
    put:
      tags:
      - article-management-controller
      operationId: changeVisibility
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeContentVisibilityRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/trusted:
    put:
      tags:
      - article-management-controller
      operationId: setTrustedState
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: trusted
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleTrustedResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/tags:
    put:
      tags:
      - article-management-controller
      operationId: changeTags
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeContentTagsRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/summary:
    put:
      tags:
      - article-management-controller
      operationId: changeSummary
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeArticleSummaryRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/state:
    put:
      tags:
      - article-management-controller
      operationId: changeState
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeArticleStateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/image:
    put:
      tags:
      - article-management-controller
      operationId: changeImage
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
              - file
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/header:
    put:
      tags:
      - article-management-controller
      operationId: changeHeader
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeArticleHeaderRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/content:
    put:
      tags:
      - article-management-controller
      operationId: changeContent
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeArticleContentRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/security/secrets/rotate-keys:
    post:
      tags:
      - Security
      operationId: rotateKeys
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
      security:
      - {}
      - {}
  /api/content/tags:
    get:
      tags:
      - tag-controller
      operationId: findTagByKeyContains
      parameters:
      - name: substring
        in: query
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/KeyContainsResponse"
      security:
      - {}
      - {}
    post:
      tags:
      - tag-controller
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/invite:
    post:
      tags:
      - article-management-controller
      operationId: inviteUser
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUserToContentRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExtendedContentAccessDetailsResponse"
      security:
      - {}
      - {}
  /api/content/articles/invite/accept:
    post:
      tags:
      - article-management-controller
      operationId: acceptInvitation
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcceptInvitationToContentRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/create:
    post:
      tags:
      - article-management-controller
      operationId: createArticle
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArticleRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/users/{id}/avatar:
    get:
      tags:
      - Users
      operationId: getAvatar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FileMetadataResponse"
      security:
      - {}
      - {}
  /api/security/secrets/rotate-keys/status:
    get:
      tags:
      - Security
      operationId: rotationOngoing
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/RotationStatusResponse"
      security:
      - {}
      - {}
  /api/content/articles:
    get:
      tags:
      - article-controller
      operationId: getArticles
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: tags
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageArticleOverviewResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}:
    get:
      tags:
      - article-controller
      operationId: getArticleByKey
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FullArticleResponse"
      security:
      - {}
      - {}
  /api/content/articles/{key}/access:
    get:
      tags:
      - article-management-controller
      operationId: getExtendedAccessDetails
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExtendedContentAccessDetailsResponse"
      security:
      - {}
      - {}
  /api/content/articles/scroll:
    get:
      tags:
      - article-controller
      operationId: getLatestArticles
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: after
        in: query
        required: false
        schema:
          type: string
      - name: locale
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ArticleResponse"
      security:
      - {}
      - {}
  /api/assets/**:
    get:
      tags:
      - local-file-storage-controller
      operationId: serveFile
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DataBuffer"
      security:
      - {}
      - {}
  /api/invite/{id}:
    delete:
      tags:
      - invitation-controller
      operationId: deleteInvitation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessResponse"
      security:
      - {}
      - {}
components:
  schemas:
    ChangeUserRequest:
      type: object
      properties:
        name:
          type: string
    ContentAccessDetails:
      type: object
      properties:
        ownerId:
          $ref: "#/components/schemas/ObjectId"
        visibility:
          type: string
          enum:
          - PRIVATE
          - PUBLIC
          - SHARED
        users:
          $ref: "#/components/schemas/ContentAccessPermissions"
        groups:
          $ref: "#/components/schemas/ContentAccessPermissions"
        invitations:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
          uniqueItems: true
      required:
      - groups
      - invitations
      - ownerId
      - users
      - visibility
    ContentAccessPermissions:
      type: object
      properties:
        admin:
          type: array
          items:
            type: string
          uniqueItems: true
        editor:
          type: array
          items:
            type: string
          uniqueItems: true
        viewer:
          type: array
          items:
            type: string
          uniqueItems: true
        isEmpty:
          type: boolean
      required:
      - admin
      - editor
      - isEmpty
      - viewer
    FileMetadataResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        key:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        access:
          $ref: "#/components/schemas/ContentAccessDetails"
        contentType:
          type: string
        url:
          type: string
        size:
          type: integer
          format: int64
        trusted:
          type: boolean
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
      required:
      - access
      - contentType
      - createdAt
      - id
      - key
      - size
      - tags
      - trusted
      - updatedAt
      - url
    ObjectId:
      type: object
      properties:
        timestamp:
          type: integer
          format: int32
        date:
          type: string
          format: date-time
    UserResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        name:
          type: string
        email:
          type: string
        identityProviders:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
            enum:
            - USER
            - ADMIN
            - GUEST
          uniqueItems: true
        emailVerified:
          type: boolean
        lastActive:
          type: string
        twoFactorAuthEnabled:
          type: boolean
        preferredTwoFactorMethod:
          type: string
          enum:
          - totp
          - mail
        twoFactorAuthMethods:
          type: array
          items:
            type: string
            enum:
            - totp
            - mail
        avatar:
          $ref: "#/components/schemas/FileMetadataResponse"
        created:
          type: string
        groups:
          type: array
          items:
            type: string
          uniqueItems: true
      required:
      - created
      - emailVerified
      - groups
      - id
      - identityProviders
      - lastActive
      - name
      - roles
      - twoFactorAuthEnabled
      - twoFactorAuthMethods
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
          minLength: 1
      required:
      - newPassword
      - oldPassword
    ChangeEmailRequest:
      type: object
      properties:
        newEmail:
          type: string
          minLength: 1
      required:
      - newEmail
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
      required:
      - error
      - status
      - timestamp
    GroupTranslation:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
      - description
      - name
    UpdateGroupRequest:
      type: object
      properties:
        translations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/GroupTranslation"
      required:
      - translations
    GroupResponse:
      type: object
      properties:
        key:
          type: string
        locale:
          type: string
        name:
          type: string
        description:
          type: string
      required:
      - description
      - key
      - locale
      - name
    TagTranslationUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    UpdateTagRequest:
      type: object
      properties:
        key:
          type: string
        translations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TagTranslationUpdateRequest"
      required:
      - translations
    TagResponse:
      type: object
      properties:
        key:
          type: string
        locale:
          type: string
        name:
          type: string
        description:
          type: string
      required:
      - description
      - key
      - locale
      - name
    ChangeContentVisibilityRequest:
      type: object
      properties:
        visibility:
          type: string
          enum:
          - PRIVATE
          - PUBLIC
          - SHARED
        sharedUsers:
          type: object
          additionalProperties:
            type: string
            enum:
            - VIEWER
            - EDITOR
            - ADMIN
        sharedGroups:
          type: object
          additionalProperties:
            type: string
            enum:
            - VIEWER
            - EDITOR
            - ADMIN
      required:
      - sharedGroups
      - sharedUsers
      - visibility
    ArticleColors:
      type: object
      properties:
        text:
          type: string
        background:
          type: string
      required:
      - background
      - text
    ContentAccessDetailsResponse:
      type: object
      properties:
        ownerId:
          $ref: "#/components/schemas/ObjectId"
        visibility:
          type: string
          enum:
          - PRIVATE
          - PUBLIC
          - SHARED
        canEdit:
          type: boolean
        canDelete:
          type: boolean
      required:
      - canDelete
      - canEdit
      - ownerId
      - visibility
    FullArticleResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        key:
          type: string
        createdAt:
          type: string
          format: date-time
        publishedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        owner:
          $ref: "#/components/schemas/UserOverviewResponse"
        path:
          type: string
        state:
          type: string
          enum:
          - PUBLISHED
          - DRAFT
          - ARCHIVED
        colors:
          $ref: "#/components/schemas/ArticleColors"
        image:
          $ref: "#/components/schemas/FileMetadataResponse"
        locale:
          type: string
        title:
          type: string
        summary:
          type: string
        content:
          type: string
        trusted:
          type: boolean
        access:
          $ref: "#/components/schemas/ContentAccessDetailsResponse"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
      required:
      - access
      - colors
      - content
      - createdAt
      - id
      - key
      - locale
      - owner
      - path
      - state
      - summary
      - tags
      - title
      - trusted
      - updatedAt
    UserOverviewResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        name:
          type: string
        email:
          type: string
        avatar:
          $ref: "#/components/schemas/FileMetadataResponse"
        roles:
          type: array
          items:
            type: string
            enum:
            - USER
            - ADMIN
            - GUEST
          uniqueItems: true
      required:
      - id
      - name
      - roles
    ArticleTrustedResponse:
      type: object
      properties:
        trusted:
          type: boolean
      required:
      - trusted
    ChangeContentTagsRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
      required:
      - tags
    ChangeArticleSummaryRequest:
      type: object
      properties:
        locale:
          type: string
        summary:
          type: string
      required:
      - locale
      - summary
    ChangeArticleStateRequest:
      type: object
      properties:
        state:
          type: string
          enum:
          - PUBLISHED
          - DRAFT
          - ARCHIVED
      required:
      - state
    ChangeArticleHeaderRequest:
      type: object
      properties:
        locale:
          type: string
        title:
          type: string
        colors:
          $ref: "#/components/schemas/ArticleColors"
      required:
      - colors
      - locale
      - title
    ChangeArticleContentRequest:
      type: object
      properties:
        locale:
          type: string
        content:
          type: string
      required:
      - content
      - locale
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
      - success
    CreateGuestRequest:
      type: object
      properties:
        name:
          type: string
        session:
          $ref: "#/components/schemas/SessionInfoRequest"
      required:
      - name
    SessionInfoRequest:
      type: object
      properties:
        browser:
          type: string
          description: The name of the browser used.
          example: Chrome
        os:
          type: string
          description: The operating system of the device.
          example: WIndows
    City:
      type: object
      properties:
        confidence:
          type: integer
          format: int32
        geoname_id:
          type: integer
          format: int64
        names:
          type: object
          additionalProperties:
            type: string
    Continent:
      type: object
      properties:
        code:
          type: string
        geoname_id:
          type: integer
          format: int64
        names:
          type: object
          additionalProperties:
            type: string
    Country:
      type: object
      properties:
        confidence:
          type: integer
          format: int32
        geoname_id:
          type: integer
          format: int64
        is_in_european_union:
          type: boolean
        iso_code:
          type: string
        names:
          type: object
          additionalProperties:
            type: string
    CreateGuestResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        accessToken:
          type: string
        refreshToken:
          type: string
        location:
          $ref: "#/components/schemas/GeolocationResponse"
      required:
      - user
    GeolocationResponse:
      type: object
      properties:
        ipAddress:
          type: string
        city:
          $ref: "#/components/schemas/City"
        country:
          $ref: "#/components/schemas/Country"
        continent:
          $ref: "#/components/schemas/Continent"
        location:
          $ref: "#/components/schemas/Location"
      required:
      - city
      - continent
      - country
      - ipAddress
      - location
    Location:
      type: object
      properties:
        accuracy_radius:
          type: integer
          format: int32
        average_income:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        metro_code:
          type: integer
          format: int32
          deprecated: true
        population_density:
          type: integer
          format: int32
        time_zone:
          type: string
    ConvertToUserRequest:
      type: object
      properties:
        email:
          type: string
          description: The user's unique email address.
          example: jane.doe@example.com
          minLength: 1
        password:
          type: string
          description: "The user's chosen password. It must be at least 8 characters\
            \ long and include at least one uppercase letter, one lowercase letter,\
            \ one number, and one special character (!@#$%^&*()_+={}[]|\\:;'\"<>,.?/)."
          example: S3cur3P@ssw0rd!
          pattern: "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\\-={}\\[\\\
            ]|\\\\:;'\"<,>.?/]).{8,}"
        session:
          $ref: "#/components/schemas/SessionInfoRequest"
      required:
      - email
      - password
    ConvertToUserResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        accessToken:
          type: string
        refreshToken:
          type: string
        location:
          $ref: "#/components/schemas/GeolocationResponse"
      required:
      - user
    CreateGroupRequest:
      type: object
      properties:
        key:
          type: string
        translations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/GroupTranslation"
        primaryLocale:
          type: string
      required:
      - key
      - translations
    AddGroupMemberRequest:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/ObjectId"
      required:
      - userId
    CreateTagRequest:
      type: object
      properties:
        key:
          type: string
        locale:
          type: string
        name:
          type: string
        description:
          type: string
      required:
      - key
      - name
    InviteUserToContentRequest:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          enum:
          - VIEWER
          - EDITOR
          - ADMIN
      required:
      - email
      - role
    ExtendedContentAccessDetailsResponse:
      type: object
      properties:
        ownerId:
          $ref: "#/components/schemas/ObjectId"
        visibility:
          type: string
          enum:
          - PRIVATE
          - PUBLIC
          - SHARED
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserContentAccessDetails"
        groups:
          type: object
          additionalProperties:
            type: string
            enum:
            - VIEWER
            - EDITOR
            - ADMIN
        invitations:
          type: array
          items:
            $ref: "#/components/schemas/InvitationResponse"
      required:
      - groups
      - invitations
      - ownerId
      - users
      - visibility
    InvitationResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        issuedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        email:
          type: string
        claims:
          type: object
          additionalProperties: {}
      required:
      - claims
      - email
      - expiresAt
      - id
      - issuedAt
    UserContentAccessDetails:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserOverviewResponse"
        role:
          type: string
          enum:
          - VIEWER
          - EDITOR
          - ADMIN
      required:
      - role
      - user
    AcceptInvitationToContentRequest:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    CreateArticleRequest:
      type: object
      properties:
        locale:
          type: string
        title:
          type: string
        summary:
          type: string
        content:
          type: string
      required:
      - content
      - locale
      - summary
      - title
    StepUpRequest:
      type: object
      properties:
        password:
          type: string
      required:
      - password
    StepUpResponse:
      type: object
      properties:
        token:
          type: string
    GenerateSessionTokenResponse:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    RegisterUserRequest:
      type: object
      properties:
        email:
          type: string
          description: The user's unique email address.
          example: jane.doe@example.com
          minLength: 1
        password:
          type: string
          description: "The user's chosen password. It must be at least 8 characters\
            \ long and include at least one uppercase letter, one lowercase letter,\
            \ one number, and one special character (!@#$%^&*()_+={}[]|\\:;'\"<>,.?/)."
          example: S3cur3P@ssw0rd!
          pattern: "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+\\-={}\\[\\\
            ]|\\\\:;'\"<,>.?/]).{8,}"
        name:
          type: string
          description: The user's name. Makes the user experience more personalized
          minLength: 1
        session:
          $ref: "#/components/schemas/SessionInfoRequest"
          description: "Information about the user's session, for security purposes."
      required:
      - email
      - name
      - password
    RegisterResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        accessToken:
          type: string
        refreshToken:
          type: string
        location:
          $ref: "#/components/schemas/GeolocationResponse"
      required:
      - user
    RefreshTokenResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
      - user
    ConnectPasswordIdentityRequest:
      type: object
      properties:
        password:
          type: string
      required:
      - password
    OAuth2ProviderConnectionTokenResponse:
      type: object
      properties:
        token:
          type: string
    OAuth2ProviderConnectionRequest:
      type: object
      properties:
        provider:
          type: string
      required:
      - provider
    ResetPasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
      required:
      - newPassword
    SendPasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          minLength: 1
      required:
      - email
    MailSendResponse:
      type: object
      properties:
        cooldown:
          type: integer
          format: int64
      required:
      - cooldown
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        session:
          $ref: "#/components/schemas/SessionInfoRequest"
      required:
      - email
      - password
    LoginResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        accessToken:
          type: string
        refreshToken:
          type: string
        twoFactorRequired:
          type: boolean
        allowedTwoFactorMethods:
          type: array
          items:
            type: string
            enum:
            - totp
            - mail
        twoFactorAuthenticationToken:
          type: string
        location:
          $ref: "#/components/schemas/GeolocationResponse"
      required:
      - twoFactorRequired
      - user
    TwoFactorSetupResponse:
      type: object
      properties:
        secret:
          type: string
        totpAuthUrl:
          type: string
        recoveryCodes:
          type: array
          items:
            type: string
        token:
          type: string
      required:
      - recoveryCodes
      - secret
      - token
      - totpAuthUrl
    TwoFactorVerifySetupRequest:
      type: object
      properties:
        token:
          type: string
        code:
          type: integer
          format: int32
      required:
      - code
      - token
    TwoFactorRecoveryResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserResponse"
        accessToken:
          type: string
        refreshToken:
          type: string
        stepUpToken:
          type: string
        sessionToken:
          type: string
      required:
      - user
    TwoFactorAuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        totp:
          type: integer
          format: int32
        session:
          $ref: "#/components/schemas/SessionInfoRequest"
    UpdatePreferredTwoFactorMethodRequest:
      type: object
      properties:
        method:
          type: string
          enum:
          - totp
          - mail
      required:
      - method
    EnableEmailTwoFactorMethodRequest:
      type: object
      properties:
        code:
          type: string
      required:
      - code
    RotationStatusResponse:
      type: object
      properties:
        isOngoing:
          type: boolean
        lastRotation:
          type: string
          format: date-time
      required:
      - isOngoing
    PageGroupResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/GroupResponse"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    KeyContainsResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
        size:
          type: integer
          format: int32
      required:
      - size
      - tags
    ArticleOverviewResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        key:
          type: string
        createdAt:
          type: string
          format: date-time
        publishedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        path:
          type: string
        state:
          type: string
          enum:
          - PUBLISHED
          - DRAFT
          - ARCHIVED
        title:
          type: string
        colors:
          $ref: "#/components/schemas/ArticleColors"
        locale:
          type: string
        summary:
          type: string
        image:
          $ref: "#/components/schemas/FileMetadataResponse"
        access:
          $ref: "#/components/schemas/ContentAccessDetailsResponse"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
      required:
      - access
      - colors
      - createdAt
      - id
      - key
      - locale
      - path
      - state
      - summary
      - tags
      - title
      - updatedAt
    PageArticleOverviewResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ArticleOverviewResponse"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    ArticleResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: "#/components/schemas/ArticleOverviewResponse"
        remainingCount:
          type: integer
          format: int64
      required:
      - articles
      - remainingCount
    AuthenticationStatusResponse:
      type: object
      properties:
        authenticated:
          type: boolean
        stepUp:
          type: boolean
        emailVerified:
          type: boolean
        twoFactorRequired:
          type: boolean
        preferredTwoFactorMethod:
          type: string
          enum:
          - totp
          - mail
        twoFactorMethods:
          type: array
          items:
            type: string
            enum:
            - totp
            - mail
      required:
      - authenticated
      - stepUp
      - twoFactorRequired
    LocationInfo:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        cityName:
          type: string
        countryCode:
          type: string
      required:
      - countryCode
      - latitude
      - longitude
    SessionInfoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        browser:
          type: string
        os:
          type: string
        ipAddress:
          type: string
        location:
          $ref: "#/components/schemas/LocationInfo"
        lastActive:
          type: string
          format: date-time
      required:
      - id
      - lastActive
    IdentityProviderResponse:
      type: object
      properties:
        provider:
          type: string
      required:
      - provider
    MailCooldownResponse:
      type: object
      properties:
        remaining:
          type: integer
          format: int64
      required:
      - remaining
    DataBuffer: {}
  securitySchemes:
    twoFactorAuthenticationTokenCookie:
      type: apiKey
      description: "Token for successful authentication with email and password, indicating\
        \ 2FA is required.You can learn more [here](https://singularity.stereov.io/docs/guides/auth/tokens#two-factor-authentication-token)."
      name: two_factor_authentication_token
      in: cookie
    accessTokenHeader:
      type: http
      description: "Access token for user authentication. You can learn more [here](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)."
      scheme: bearer
      bearerFormat: JWT
    accessTokenCookie:
      type: apiKey
      description: "Access token for user authentication.You can learn more [here](https://singularity.stereov.io/docs/guides/auth/tokens#access-token)."
      name: access_token
      in: cookie
    stepUpTokenCookie:
      type: apiKey
      description: "Token for step up authentication allowing access of secure resources.You\
        \ can learn more [here](https://singularity.stereov.io/docs/guides/auth/tokens#step-up-token)."
      name: step_up_token
      in: cookie
    twoFactorAuthenticationTokenHeader:
      type: apiKey
      description: "Token for successful authentication with email and password, indicating\
        \ 2FA is required.You can learn more [here](https://singularity.stereov.io/docs/guides/auth/tokens#two-factor-authentication-token)."
      name: X-Two-Factor-Authentication-Token
      in: header
    refreshTokenHeader:
      type: http
      description: "Refresh token to request new access tokens.You can learn more\
        \ [here](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)."
      scheme: bearer
      bearerFormat: JWT
    stepUpTokenHeader:
      type: apiKey
      description: "Token for step up authentication allowing access of secure resources.You\
        \ can learn more [here](https://singularity.stereov.io/docs/guides/auth/tokens#step-up-token)."
      name: X-Step-Up-Token
      in: header
    refreshTokenCookie:
      type: apiKey
      description: "Refresh token to request new access tokens.You can learn more\
        \ [here](https://singularity.stereov.io/docs/guides/auth/tokens#refresh-token)."
      name: refresh_token
      in: cookie
