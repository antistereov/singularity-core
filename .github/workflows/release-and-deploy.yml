name: Release and Deploy

on:
  workflow_dispatch:
    inputs:
      release_version_input:
        description: 'The release version to use (e.g., 1.2.3). Do NOT include "v".'
        required: true
        type: string

env:
  MAVENCENTRAL_USERNAME: ${{ secrets.MAVENCENTRAL_USERNAME }}
  MAVENCENTRAL_PASSWORD: ${{ secrets.MAVENCENTRAL_PASSWORD }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
  GPR_KEY: ${{ secrets.GPR_KEY }}
  GPR_USER: ${{ secrets.GPR_USER }}
  MIRROR_TOKEN: ${{ secrets.MIRROR_TOKEN }}

jobs:
  release_and_deploy:
    name: Release and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      #############################################################
      # Setup
      #############################################################

      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      #############################################################
      # Build and Test
      #############################################################

      - name: Build with Gradle
        run: |
          ./gradlew assemble
      - name: Run Tests
        run: |
          ./gradlew test

      #############################################################
      # Update Version
      #############################################################

      - name: Determine Version to Use
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_version_input }}"
          echo "Using manually provided version: $RELEASE_VERSION"
          echo "release_version=${RELEASE_VERSION}" >> "$GITHUB_ENV"

      - name: Update Version in gradle.properties
        run: |
          if [ -f gradle.properties ]; then
            sed -i "s/^version=.*$/version=${{ env.release_version }}/" gradle.properties
            echo "Updated gradle.properties with version: ${{ env.release_version }}"
          else
            echo "Error: gradle.properties not found in the root directory."
            exit 1
          fi

      - uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "ci: bump version to ${{ env.release_version }}"
          tagging_message: "v${{ env.release_version }}"

      #############################################################
      # Generating Changelog
      #############################################################

      - name: Generate Changelog
        run: |
          ./gradlew clean
          ./gradlew publish
          ./gradlew jreleaserChangelog

      - uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "ci: update changelog"

      #############################################################
      # Publishing
      #############################################################

      - name: Publish
        run: |
          ./gradlew publish

      - name: Release and Deploy
        run: |
          ./gradlew jreleaserFullRelease

      #############################################################
      # Update Snapshot Version
      #############################################################

      - name: Calculate next snapshot version
        id: calculate_snapshot
        run: |
          CURRENT_VERSION="${{ env.release_version }}"
          echo "Current release version: $CURRENT_VERSION"
          
          # Split version into parts (e.g., 1.0.0 -> 1, 0, 0)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment minor version
          NEXT_MINOR=$((MINOR + 1))
          NEXT_SNAPSHOT_VERSION="${MAJOR}.${NEXT_MINOR}.0-SNAPSHOT" # Reset patch to 0 for next minor
          
          echo "Calculated next snapshot version: $NEXT_SNAPSHOT_VERSION"
          echo "next_snapshot_version=$NEXT_SNAPSHOT_VERSION" >> "$GITHUB_ENV"

      - name: Update version in gradle.properties to snapshot
        run: |
          if [ -f gradle.properties ]; then
            sed -i "s/^version=.*$/version=${{ env.next_snapshot_version }}/" gradle.properties
            echo "Updated gradle.properties with snapshot version: ${{ env.next_snapshot_version }}"
          else
            echo "Error: gradle.properties not found in the root directory."
            exit 1
          fi

      - name: Commit and Push Snapshot Version Update
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'ci: bump version to ${{ env.next_snapshot_version }} for next development cycle'
