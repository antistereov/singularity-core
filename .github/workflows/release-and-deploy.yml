name: Release and Deploy

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

env:
  MAVENCENTRAL_USERNAME: ${{ secrets.MAVENCENTRAL_USERNAME }}
  MAVENCENTRAL_PASSWORD: ${{ secrets.MAVENCENTRAL_PASSWORD }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
  GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
  MIRROR_TOKEN: ${{ secrets.MIRROR_TOKEN }}

jobs:
  release_and_deploy:
    name: Release and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      #############################################################
      # Setup
      #############################################################

      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      #############################################################
      # Build and Test
      #############################################################

      - name: Build with Gradle
        run: |
          ./gradlew assemble
      - name: Run Tests
        run: |
          ./gradlew test

      #############################################################
      # Update Version
      #############################################################

      - name: Determine current version and calculate next release version
        id: determine_version
        run: |
          # Read current version from gradle.properties
          CURRENT_VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          echo "Current version: $CURRENT_VERSION"
      
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_VERSION//-SNAPSHOT/}"
      
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
      
          case "$VERSION_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Unknown version type: $VERSION_TYPE"
              exit 1
              ;;
          esac
      
          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Calculated release version: $NEXT_VERSION"
      
          echo "release_version=$NEXT_VERSION" >> "$GITHUB_ENV"
          echo "release_version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update Version in gradle.properties
        run: |
          if [ -f gradle.properties ]; then
            sed -i "s/^version=.*$/version=${{ env.release_version }}/" gradle.properties
            echo "Updated gradle.properties with version: ${{ env.release_version }}"
          else
            echo "Error: gradle.properties not found in the root directory."
            exit 1
          fi

      - name: Commit and Push Version update
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "ci: bump version to ${{ env.release_version }}"
          tagging_message: "v${{ env.release_version }}"

      #############################################################
      # Publishing
      #############################################################

      - name: Release and Deploy
        run: |
          ./gradlew jreleaserFullRelease

      - name: Commit and Push Changelog update
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "ci: bump version to ${{ env.release_version }}"

      #############################################################
      # Update Snapshot Version
      #############################################################

      - name: Create next snapshot version
        id: create_snapshot
        run: |
          CURRENT_VERSION="${{ env.release_version }}"
          echo "Current release version: $CURRENT_VERSION"
          
          SNAPSHOT_VERSION="${{ env.release_version }}-SNAPSHOT"
          
          echo "Next snapshot: $SNAPSHOT_VERSION"
          echo "snapshot_version=$SNAPSHOT_VERSION" >> "$GITHUB_ENV"

      - name: Update version in gradle.properties to snapshot
        run: |
          if [ -f gradle.properties ]; then
            sed -i "s/^version=.*$/version=${{ env.snapshot_version }}/" gradle.properties
            echo "Updated gradle.properties with snapshot version: ${{ env.snapshot_version }}"
          else
            echo "Error: gradle.properties not found in the root directory."
            exit 1
          fi

      - name: Commit and Push Snapshot Version Update
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: 'ci: bump version to ${{ env.snapshot_version }} for next development cycle'
